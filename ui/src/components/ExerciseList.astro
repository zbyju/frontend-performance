---
import { Exercise } from '../types/exercise.types';
import ExerciseCard from './ExerciseCard';

interface Props {
  exercises: Exercise[];
}
const { exercises } = Astro.props;
---

<div class="exercise-list">
  <h1>Exercises</h1>
  {exercises.length > 0 ? exercises.map(e => <ExerciseCard exercise={e} client:visible />) : <p>No exercises</p>}
</div>

<style is:global>
	.link-card {
		list-style: none;
		display: flex;
		padding: 0.15rem;
		background-color: white;
		background-image: var(--accent-gradient);
		background-size: 400%;
		border-radius: 0.5rem;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
    margin-top: 5px;
    margin-bottom: 5px;
	}
	.link-card > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: 1rem 1.3rem;
		border-radius: 0.35rem;
		color: #111;
		background-color: white;
		opacity: 0.8;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	.link-card:is(:hover, :focus-within) {
		background-position: 0;
	}
	.link-card:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent));
	}
  .link-card p {
    padding: 0;
    margin: 0
  }
  .link-card p.loading { color: #444 }
  .link-card p.pending { color: rgb(78, 35, 210) }
  .link-card p.completed { color: rgb(59, 164, 71) }
  .link-card p.touched { color: #222 }
  .link-card p.untouched { color: #444 }
</style>
